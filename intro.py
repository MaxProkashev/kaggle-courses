# ------------------------------------------------------------
# |                                                          |
# |                   –≤–≤–µ–¥–µ–Ω–∏–µ –≤ python                      |
# |                                                          |
# ------------------------------------------------------------
#
#
# –°–ü–ò–°–ö–ò, –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å, –¥–æ–±–∞–≤–ª—è—Ç—å
primes = [2, 3, 5, 7]
planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
hands = [
    ['J', 'Q', 'K'],
    ['2', '2', '2'],
    ['6', 'A', 'K'],
]

# –°–†–ï–ó–´
planets[0:3]    # ['Mercury', 'Venus', 'Earth']
planets[:3]     # ['Mercury', 'Venus', 'Earth']
planets[3:]     # ['Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
planets[1:-1]   # ['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus']
planets[-3:]    # ['Saturn', 'Uranus', 'Neptune']

planets[:3] = ['Mur', 'Vee', 'Ur']  # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º

len(planets)    # –¥–ª–∏–Ω–∞
sorted(planets) # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
sum(primes)     # —Å—É–º–º–∞
max(primes)     # –º–∞–∫—Å–∏–º—É–º
min(primes)     # –º–∏–Ω–∏–º—É–º


# –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —á–∏—Å–ª–æ
c = 12 + 3j
c.imag      # attribute

# —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–∞—è –∫ –æ–±—ä–µ–∫—Ç—É, –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ú–ï–¢–û–î.
# –Ω–µ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–µ—â–∏, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫ –æ–±—ä–µ–∫—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –ê–¢–†–ò–ë–£–¢–ê–ú–ò.

# –º–µ—Ç–æ–¥—ã —Å–ø–∏—Å–∫–æ–≤
planets.append('Pluto')     # –∏–∑–º–µ–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤–ª—è—è —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü
planets.pop()               # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
planets.index('Earth')      # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –æ–±—ä–µ–∫—Ç–∞

"Earth" in planets          # –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ


# –ö–û–†–¢–ï–ñ–ò, –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å
t = (1, 2, 3)

# –¶–ò–ö–õ–´
for planet in planets:      # –ø—Ä–æ—Ö–æ–¥ –ø–æ —Å–ø–∏—Å–∫—É planets
    print(planet, end=' ')

# –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, planet)
# –Ω–∞–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ü–∏–∫–ª–∞ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, planets)

for i in range(5):          # range() - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª
    print(i)

# list comprehensions
# —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
squares = [n**2 for n in range(10)]     # —Ü–∏–∫–ª—ã –≤–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞
# –∏–ª–∏
squares = []
for n in range(10):
    squares.append(n**2)

# —É—Å–ª–æ–≤–∏–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ä–µ–∑–∞ –ø–æ —Å–ø–∏—Å–∫—É (–º–æ–∂–Ω–æ —Å—Ä–∞–∑—É —á—Ç–æ —Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ —É—Å–ª–æ–≤–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏)
short_planets = [planet for planet in planets if len(planet)<6]                         # ['Venus', 'Earth', 'Mars']
loud_short_planets = [planet.upper() + '!' for planet in planets if len(planet) < 6]    # ['VENUS!', 'EARTH!', 'MARS!']

def count_negatives(nums):
    return len([num for num in nums if num < 0])     # –∏–ª–∏ return sum([num < 0 for num in nums])

# –°–¢–†–û–ö–ò
claim = "Pluto is a planet!"
claim.upper()                   # 'PLUTO IS A PLANET!'
claim.lower()                   # 'pluto is a planet!'
claim.index('plan')             # 11
claim.startswith(planet)        # True
claim.endswith('dwarf planet')  # False

# .split()
words = claim.split()           # ['Pluto', 'is', 'a', 'planet!']

# .join()
datestr = '1956-01-31'
year, month, day = datestr.split('-')
'/'.join([month, day, year])    # '01/31/1956'
' üëè '.join([word.upper() for word in words])   # 'PLUTO üëè IS üëè A üëè PLANET!'

# .format()
planet + ', we miss you.'
planet + ", you'll always be the " + str(9) + "th planet to me."

"{}, you'll always be the {}th planet to me.".format(planet, 9)
"Pluto's a {0}.\nNo, it's a {1}.\n{0}!\n{1}!".format('planet', 'dwarf planet')

# –°–õ–û–í–ê–†–ò
numbers = {'one':1, 'two':2, 'three':3}
numbers['eleven'] = 11
numbers['one'] = 'Pluto'
for k in numbers:
    print("{} = {}".format(k, numbers[k]))

# —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Ü–∏–∫–ª–æ–º
planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
planet_to_initial = {planet: planet[0] for planet in planets}

# –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
from math import pi
"{:.4}".format(pi)

# submodels
import numpy
rolls = numpy.random.randint(low=1, high=6, size=10)        # array([4, 1, 2, 2, 1, 3, 1, 1, 5, 2])
type(rolls)     # numpy.ndarray
rolls.mean()    # —Å—Ä–µ–¥–Ω–µ–µ
